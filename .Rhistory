c2plasso_irr_modi <- sum(c2plasso_coef[51:70,] * (1-true_theta1) != 0)/(sum(1-true_theta1)*num_run)
lasso_fdr <- sum(lasso_coef * (1-true_coef1) !=0)/sum(lasso_coef!=0)
plasso_fdr <- sum(plasso_coef * (1-true_coef1) !=0)/sum(plasso_coef!=0)
c2plasso_fdr <- sum(c2plasso_coef * (1-true_coef1) !=0)/sum(c2plasso_coef!=0)
lasso_sen <- sum(lasso_coef * true_coef1 !=0)/(sum(true_coef1)*num_run)
plasso_sen <- sum(plasso_coef * true_coef1 !=0)/(sum(true_coef1)*num_run)
c2plasso_sen <- sum(c2plasso_coef * true_coef1 !=0)/(sum(true_coef1)*num_run)
lasso_spe <- sum((lasso_coef==0) * (1-true_coef1) !=0)/(sum(1-true_coef1)*num_run)
plasso_spe <- sum((plasso_coef==0) * (1-true_coef1) !=0)/(sum(1-true_coef1)*num_run)
c2plasso_spe <- sum((c2plasso_coef==0) * (1-true_coef1) !=0)/(sum(1-true_coef1)*num_run)
lasso_geo <- mean(sqrt((apply(lasso_coef * true_coef1 !=0, 2, sum)/sum(true_coef1)) * (apply((lasso_coef==0) * (1-true_coef1) !=0, 2, sum)/sum(1-true_coef1))))
plasso_geo <- mean(sqrt((apply(plasso_coef * true_coef1 !=0, 2, sum)/sum(true_coef1)) * (apply((plasso_coef==0) * (1-true_coef1) !=0, 2, sum)/sum(1-true_coef1))))
c2plasso_geo <- mean(sqrt((apply(c2plasso_coef * true_coef1 !=0, 2, sum)/sum(true_coef1)) * (apply((c2plasso_coef==0) * (1-true_coef1) !=0, 2, sum)/sum(1-true_coef1))))
per_rel_main <- c(lasso_rel_main, plasso_rel_main, c2plasso_rel_main)
per_irr_main <- c(lasso_irr_main, plasso_irr_main, c2plasso_irr_main)
per_rel_modi <- c(lasso_rel_modi, plasso_rel_modi, c2plasso_rel_modi)
per_irr_modi <- c(lasso_irr_modi, plasso_irr_modi, c2plasso_irr_modi)
fdr_summary <- c(lasso_fdr, plasso_fdr, c2plasso_fdr)
geo_summary <- c(lasso_geo, plasso_geo, c2plasso_geo)
sen_summary <- c(lasso_sen, plasso_sen, c2plasso_sen)
spe_summary <- c(lasso_spe, plasso_spe, c2plasso_spe)
mse_summary <- c(mean(as.matrix(lasso_cvm)), mean(as.matrix(plasso_cvm)), mean(as.matrix(c2plasso_cvm)))
table_summary <- rbind(per_rel_main, per_irr_main, per_rel_modi, per_irr_modi,
fdr_summary, geo_summary, mse_summary)
table_summary <- as.data.frame(table_summary)
method_names <- c("Lasso", "Plasso", "Modified Plasso")
colnames(table_summary) <- method_names
table_summary["metric"] <- c("% Selected","","","","FDR","G","MSE")
table_summary["group"] <- c("Main","","Modifying","","","","")
table_summary["subgroup"] <- c("Non-zero","Zero","Non-zero","Zero","","","")
cn <- ncol(table_summary)
table_summary2 <- table_summary[,c(cn-2,cn-1,cn,1:(cn-3))]
table_summary2
sen_summary
spe_summary
?plasso
?c2plasso
x
x=matrix(rnorm(100*50, 0, 1),100,50)
z1=matrix(rnorm(100*10, 0, 1),100,10)
z2=matrix(as.factor(sample(0:2, 100*10, prob=c(1/3,1/3,1/3), replace = T)),100,10)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
xz=as.matrix(cbind(x,z))
y=4*x[,1] - 4*x[,2] + (4+4*z[,1])*x[,3] + (4-4*z[,2]+4*z[,11]-4*z[,12])*x[,4] + 0.5*rnorm(100, 0, 1)
plasso(x,z,y)
plasso(x,z,y, lambda_seq = 0.5)
x=matrix(rnorm(100*5, 0, 1),100,5)
z1=matrix(rnorm(100*3, 0, 1),100,3)
z2=matrix(as.factor(sample(0:2, 100*2, prob=c(1/3,1/3,1/3), replace = T)),100,2)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
y=4*x[,1] - 4*x[,2] + (4+4*z[,1])*x[,3] + (4-4*z[,2]+4*z[,4]-4*z[,5])*x[,4] + 0.5*rnorm(100, 0, 1)
plasso(x,z,y, lambda_seq = 0.5)
rm(list=ls(all=TRUE))
library(glmnet)
library(c2plasso)
library(pliable)
x=matrix(rnorm(100*10, 0, 1),100,10)
z1=matrix(rnorm(100*5, 0, 1),100,5)
z2=matrix(as.factor(sample(0:2, 100*5, prob=c(1/3,1/3,1/3), replace = T)),100,5)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
xz=as.matrix(cbind(x,z))
y=4*x[,1] - 4*x[,2] + (4+4*z[,1])*x[,3] + (4-4*z[,2]+4*z[,6]-4*z[,7])*x[,4] + 0.5*rnorm(100, 0, 1)
plasso.fit <- plasso(x,z,y, lambda_seq = c(0.3,0.2,0.1))
plasso.fit$beta_mat
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,1,1,1,2,2,2,2,2), lambda_seq = c(0.3,0.2,0.1))
x=matrix(rnorm(100*5, 0, 1),100,5)
z1=matrix(rnorm(100*2, 0, 1),100,2)
z2=matrix(as.factor(sample(0:2, 100*1, prob=c(1/3,1/3,1/3), replace = T)),100,1)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
y=4*x[,1] - 4*x[,2] + (4+4*z[,1])*x[,3] + (4-4*z[,2]+4*z[,3]-4*z[,4])*x[,4] + 0.5*rnorm(100, 0, 1)
plasso.fit <- plasso(x,z,y, lambda_seq = c(0.3,0.2,0.1))
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,1,1,1,2,2,2,2,2), lambda_seq = c(0.3,0.2,0.1))
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,2), lambda_seq = c(0.3,0.2,0.1))
plasso.fit$beta_mat
plasso.fit$beta_mat; plasso.fit$theta_mat
x=matrix(rnorm(100*10, 0, 1),100,10)
z1=matrix(rnorm(100*2, 0, 1),100,2)
z2=matrix(as.factor(sample(0:2, 100*1, prob=c(1/3,1/3,1/3), replace = T)),100,1)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
y=4*x[,1] - 4*x[,2] + (4+4*z[,1])*x[,3] + (4-4*z[,2]+4*z[,3]-4*z[,4])*x[,4] + 0.5*rnorm(100, 0, 1)
plasso.fit <- plasso(x,z,y, lambda_seq = c(0.3,0.2,0.1))
plasso.fit$beta_mat; plasso.fit$theta_mat
plasso.fit <- plasso(x,z,y, lambda_seq = seq(0.5,0,-0.1))
plasso.fit$beta_mat
y=2*x[,1] - 2*x[,2] + (2+2*z[,1])*x[,3] + (2-2*z[,2]+2*z[,3]-2*z[,4])*x[,4] + rnorm(100, 0, 1)
plasso.fit <- plasso(x,z,y, lambda_seq = seq(0.5,0,-0.1))
plasso.fit$beta_mat
plasso.fit <- plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1))
set.seed(1234)
x=matrix(rnorm(100*10, 0, 1),100,10)
z1=matrix(rnorm(100*2, 0, 1),100,2)
z2=matrix(as.factor(sample(0:2, 100*1, prob=c(1/3,1/3,1/3), replace = T)),100,1)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
y=2*x[,1] - 2*x[,2] + (2+2*z[,1])*x[,3] + (2-2*z[,2]+2*z[,3]-2*z[,4])*x[,4] + rnorm(100, 0, 1)
plasso.fit <- plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1))
plasso.fit$beta_mat
plasso.fit$theta_mat
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,2), lambda_seq = c(0.3,0.2,0.1))
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,2), lambda_seq = seq(0.5,0.1,-0.1))
c2plasso.fit$beta_mat
c2plasso.fit$theta_mat
cv.plasso.result <- cv.plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1))
cv.plasso.result <- cv.plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1), kfold = 5)
cv.plasso.result$lambda_min
cv.plasso.result$beta_mat
cv.plasso.result$beta_mat[, which.min(cv.plasso.result$cvm)]
cv.plasso.result$theta_mat[,, which.min(cv.plasso.result$cvm)]
cv.c2plasso.result <- cv.c2plasso(x,z,y, df_Z = c(1,1,2), lambda_seq = seq(0.5,0.1,-0.1), kfold = 5)
cv.c2plasso.result$lambda_min
cv.c2plasso.result$beta_mat[, which.min(cv.c2plasso.result$cvm)]
cv.c2plasso.result$theta_mat[,, which.min(cv.c2plasso.result$cvm)]
cv.plasso.result$theta_mat[,, which.min(cv.plasso.result$cvm)]
cv.plasso.result$beta_mat[, which.min(cv.plasso.result$cvm)]
cv.c2plasso.result$beta_mat[, which.min(cv.c2plasso.result$cvm)]
set.seed(1234)
x=matrix(rnorm(100*10, 0, 1),100,10)
z1=matrix(rnorm(100*5, 0, 1),100,5)
z2=matrix(as.factor(sample(0:2, 100*5, prob=c(1/3,1/3,1/3), replace = T)),100,5)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
y=2*x[,1] - 2*x[,2] + (2+2*z[,1])*x[,3] + (2-2*z[,2]+2*z[,6]-2*z[,7])*x[,4] + rnorm(100, 0, 1)
plasso.fit <- plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1))
plasso.fit$beta_mat
plasso.fit$theta_mat
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,2), lambda_seq = seq(0.5,0.1,-0.1))
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,1,1,1,2,2,2,2,2), lambda_seq = seq(0.5,0.1,-0.1))
c2plasso.fit$beta_mat
c2plasso.fit$theta_mat
cv.plasso.result <- cv.plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1), kfold = 5)
cv.plasso.result$lambda_min
cv.plasso.result$beta_mat[, which.min(cv.plasso.result$cvm)]
cv.plasso.result$theta_mat[,, which.min(cv.plasso.result$cvm)]
cv.c2plasso.result <- cv.c2plasso(x,z,y, df_Z = c(1,1,2), lambda_seq = seq(0.5,0.1,-0.1), kfold = 5)
cv.c2plasso.result <- cv.c2plasso(x,z,y, df_Z = c(1,1,1,1,1,2,2,2,2,2), lambda_seq = seq(0.5,0.1,-0.1), kfold = 5)
cv.c2plasso.result$lambda_min
cv.c2plasso.result$beta_mat[, which.min(cv.c2plasso.result$cvm)]
cv.c2plasso.result$theta_mat[,, which.min(cv.c2plasso.result$cvm)]
cv.plasso.result$lambda_min
cv.plasso.result$beta_mat[, which.min(cv.plasso.result$cvm)]
cv.plasso.result$theta_mat[,, which.min(cv.plasso.result$cvm)]
pliable.fit <- pliable(x,z,y, lambda = seq(0.5,0.1,-0.1))
pliable.fit$beta
pliable.fit$theta
pliable.fit$beta
plasso.fit$beta_mat
?cv.pliable
cv.pliable.result <- cv.pliable(pliable.fit, x,z,y, nfolds = 5)
cv.pliable.result$lambda.min
pliable.fit$beta[,which.min(cv.pliable.result$cvm)]
pliable.fit$theta[,,which.min(cv.pliable.result$cvm)]
rm(list=ls(all=TRUE))
library(c2plasso)
library(pliable)
# Generate data
set.seed(1234)
x=matrix(rnorm(100*10, 0, 1),100,10)
z1=matrix(rnorm(100*5, 0, 1),100,5)
z2=matrix(as.factor(sample(0:2, 100*5, prob=c(1/3,1/3,1/3), replace = T)),100,5)
z2=as.data.frame(model.matrix(~., data=as.data.frame(z2))[,-1])
z=cbind(z1, z2)
z=as.matrix(z)
y=2*x[,1] - 2*x[,2] + (2+2*z[,1])*x[,3] + (2-2*z[,2]+2*z[,6]-2*z[,7])*x[,4] + rnorm(100, 0, 1)
plasso.fit <- plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1))
plasso.fit$beta_mat
plasso.fit$theta_mat
c2plasso.fit <- c2plasso(x,z,y, df_Z = c(1,1,1,1,1,2,2,2,2,2), lambda_seq = seq(0.5,0.1,-0.1))
c2plasso.fit$beta_mat
c2plasso.fit$theta_mat
cv.plasso.result <- cv.plasso(x,z,y, lambda_seq = seq(0.5,0.1,-0.1), kfold = 5)
cv.plasso.result$lambda_min
cv.plasso.result$beta_mat[, which.min(cv.plasso.result$cvm)]
cv.plasso.result$theta_mat[,, which.min(cv.plasso.result$cvm)]
cv.c2plasso.result <- cv.c2plasso(x,z,y, df_Z = c(1,1,1,1,1,2,2,2,2,2), lambda_seq = seq(0.5,0.1,-0.1), kfold = 5)
cv.c2plasso.result$lambda_min
cv.c2plasso.result$beta_mat[, which.min(cv.c2plasso.result$cvm)]
cv.c2plasso.result$theta_mat[,, which.min(cv.c2plasso.result$cvm)]
cv.plasso.result$lambda_min
cv.plasso.result$beta_mat[, which.min(cv.plasso.result$cvm)]
cv.plasso.result$theta_mat[,, which.min(cv.plasso.result$cvm)]
cv.c2plasso.result$lambda_min
cv.c2plasso.result$beta_mat[, which.min(cv.c2plasso.result$cvm)]
cv.c2plasso.result$theta_mat[,, which.min(cv.c2plasso.result$cvm)]
pliable.fit <- pliable(x,z,y, lambda = seq(0.5,0.1,-0.1))
pliable.fit$beta
pliable.fit$theta
cv.pliable.result <- cv.pliable(pliable.fit, x,z,y, nfolds = 5)
cv.pliable.result$lambda.min
pliable.fit$beta[,which.min(cv.pliable.result$cvm)]
pliable.fit$theta[,,which.min(cv.pliable.result$cvm)]
rm(list=ls(all=TRUE))
library(glmnet)
library(pliable)
library(c2plasso)
dat <- read.csv("../c2plasso/data/combine_final_2.csv")
dat$GENDERb <- abs(as.numeric(dat$GENDER)-2)
dat$CAPgc <- as.factor(as.numeric(relevel(relevel(dat$CAPg, "mid"), "low"))-1)
response <- dat[,13]
main_predictor <- dat[,18:80]
main_predictor <- main_predictor[,c(-35,-36,-38,-39)]
modifying_variable <- dat[,c(96, 12, 97)]
dat_modifying <- cbind(observed_response=response,modifying_variable)
dat_dummy_modifying <- as.data.frame(model.matrix(observed_response~., data=dat_modifying)[,-1])
x <- main_predictor; z <- dat_dummy_modifying; y <- response; xz=as.matrix(cbind(x,z))
lambda_seq <- seq(0.5,0.2,-0.01); alpha <- 0.5; kfold <- 10; df_Z <- c(1,1,2)
lasso_result <- glmnet(x = xz, y = y, lambda = lambda_seq)
cv.lasso_result <- cv.glmnet(x = xz, y = y, lambda = lambda_seq, nfolds = kfold)
cv.plasso_result <- cv.plasso(X = x, Z = z, Y = y, kfold = kfold, lambda_seq = lambda_seq, alpha = alpha, zlinear = FALSE, cvseed = 0)
cv.c2plasso_result <- cv.c2plasso(X = x, Z = z, Y = y, df_Z = df_Z, kfold = kfold, lambda_seq = lambda_seq, alpha = alpha, zlinear = FALSE, cvseed = 0)
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$beta_mat[,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$theta_mat[,,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
cv.plasso_result$lambda_min
cv.c2plasso_result$lambda_min
cv.plasso_result$beta_mat
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
sum(cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)] != 0)
sum(cv.c2plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)] != 0)
sum(cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)] != 0)
sum(cv.c2plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)] != 0)
cv.plasso_result_1 <- cv.plasso_result
cv.c2plasso_result_1 <- cv.c2plasso_result
cv.lasso_result_1 <- cv.lasso_result
cv.lasso_result_1$lambda.min
lambda_seq <- seq(10,0.2,-0.01); alpha <- 0.5; kfold <- 10; df_Z <- c(1,1,2)
lasso_result <- glmnet(x = xz, y = y, lambda = lambda_seq)
cv.lasso_result <- cv.glmnet(x = xz, y = y, lambda = lambda_seq, nfolds = kfold)
cv.plasso_result <- cv.plasso(X = x, Z = z, Y = y, kfold = kfold, lambda_seq = lambda_seq, alpha = alpha, zlinear = FALSE, cvseed = 0)
cv.c2plasso_result <- cv.c2plasso(X = x, Z = z, Y = y, df_Z = df_Z, kfold = kfold, lambda_seq = lambda_seq, alpha = alpha, zlinear = FALSE, cvseed = 0)
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$beta_mat[,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$theta_mat[,,which.min(cv.c2plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
which.min(cv.plasso_result$cvm)
cv.plasso_result$lambda_min
cv.c2plasso_result$lambda_min
cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$beta_mat[,which.min(cv.c2plasso_result$cvm)]
cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$theta_mat[,,which.min(cv.c2plasso_result$cvm)]
cv.plasso_result$cvm
plot(cv.plasso_result$cvm)
plot(cv.plasso_result$cvm[-1:800])
plot(cv.plasso_result$cvm[-1:-800])
plot(cv.plasso_result$cvm[-1:-900])
plot(cv.plasso_result$cvm[-1:-950])
plot(cv.c2plasso_result$cvm[-1:-950])
cv.lasso_result$cvm
lambda_seq <- seq(10,0.01,-0.01)
lasso_result <- glmnet(x = xz, y = y, lambda = lambda_seq)
cv.lasso_result <- cv.glmnet(x = xz, y = y, lambda = lambda_seq, nfolds = kfold)
lasso_result$beta[,which.min(cv.lasso_result$cvm)]
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
which.min(cv.lasso_result$cvm)
cv.lasso_result$lambda.min
cv.plasso_result$lambda_min
cv.c2plasso_result$lambda_min
dim(dat)[1]
lasso_result$beta
class(lasso_result$beta)
dim(lasso_result$beta)
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
dim(lasso_boot)
for (i in 1:num_boot){
boot_id <- sample(1:dim(dat)[1], replace = TRUE)
xb <- x[boot_id,]; zb <- z[boot_id,]; yb <- y[boot_id]; xzb=as.matrix(cbind(xb,zb))
lasso_boot <- glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta
}
lasso_boot
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
for (i in 1:num_boot){
boot_id <- sample(1:dim(dat)[1], replace = TRUE)
xb <- x[boot_id,]; zb <- z[boot_id,]; yb <- y[boot_id]; xzb=as.matrix(cbind(xb,zb))
lasso_boot[,i] <- glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta
}
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
for (i in 1:num_boot){
boot_id <- sample(1:dim(dat)[1], replace = TRUE)
xb <- x[boot_id,]; zb <- z[boot_id,]; yb <- y[boot_id]; xzb=as.matrix(cbind(xb,zb))
print(glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta)
lasso_boot[,i] <- glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta
}
lasso_result$beta
lasso_result$beta[,1]
dim(lasso_result$beta[,1])
dim(lasso_result$beta)
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
for (i in 1:num_boot){
boot_id <- sample(1:dim(dat)[1], replace = TRUE)
xb <- x[boot_id,]; zb <- z[boot_id,]; yb <- y[boot_id]; xzb=as.matrix(cbind(xb,zb))
print(glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta)
lasso_boot[,i] <- glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta[,1]
}
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
for (i in 1:num_boot){
boot_id <- sample(1:dim(dat)[1], replace = TRUE)
xb <- x[boot_id,]; zb <- z[boot_id,]; yb <- y[boot_id]; xzb=as.matrix(cbind(xb,zb))
lasso_boot[,i] <- glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta[,1]
}
lasso_boot
dim(lasso_boot)
lasso_boot[,1]
lasso_boot[,2]
lasso_boot[,500]
dim(cv.plasso_result$beta_mat)[1]
dim(cv.plasso_result$theta_mat)[1:2]
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
plasso_boot_beta <- matrix(NA, dim(cv.plasso_result$beta_mat)[1], num_boot)
plasso_boot_theta <- array(NA, dim(cv.plasso_result$theta_mat)[1:2], num_boot)
plasso_boot_theta <- array(NA, c(dim(cv.plasso_result$theta_mat)[1:2], num_boot))
dim(plasso_boot_theta)
c2plasso_boot_beta <- plasso_boot_beta
c2plasso_boot_theta <- plasso_boot_theta
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
plasso_boot_beta <- matrix(NA, dim(cv.plasso_result$beta_mat)[1], num_boot)
plasso_boot_theta <- array(NA, c(dim(cv.plasso_result$theta_mat)[1:2], num_boot))
c2plasso_boot_beta <- plasso_boot_beta
c2plasso_boot_theta <- plasso_boot_theta
for (i in 1:num_boot){
boot_id <- sample(1:dim(dat)[1], replace = TRUE)
xb <- x[boot_id,]; zb <- z[boot_id,]; yb <- y[boot_id]; xzb=as.matrix(cbind(xb,zb))
lasso_boot[,i] <- glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta[,1]
plasso_boot <- plasso(xb, zb, yb, lambda_seq = cv.plasso_result$lambda_min, zlinear = FALSE)
plasso_boot_beta[,i] <- plasso_boot$beta_mat
plasso_boot_theta[,,i] <- plasso_boot$theta_mat
c2plasso_boot <- c2plasso(xb, zb, yb, df_Z = df_Z, lambda_seq = cv.c2plasso_result$lambda_min, zlinear = FALSE)
c2plasso_boot_beta[,i] <- c2plasso_boot$beta_mat
c2plasso_boot_theta[,,i] <- c2plasso_boot$theta_mat
}
lasso_boot
plasso_boot_beta
plasso_boot_beta[,1:3]
plasso_boot_theta[,,1:3]
c2plasso_boot_beta[,1:3]
plasso_boot_beta[,1:3]
c2plasso_boot_theta[,,1:3]
num_boot <- 500
lasso_boot <- matrix(NA, dim(lasso_result$beta)[1], num_boot)
plasso_boot_beta <- matrix(NA, dim(cv.plasso_result$beta_mat)[1], num_boot)
plasso_boot_theta <- array(NA, c(dim(cv.plasso_result$theta_mat)[1:2], num_boot))
c2plasso_boot_beta <- plasso_boot_beta
c2plasso_boot_theta <- plasso_boot_theta
for (i in 1:num_boot){
boot_id <- sample(1:dim(dat)[1], replace = TRUE)
xb <- x[boot_id,]; zb <- z[boot_id,]; yb <- y[boot_id]; xzb=as.matrix(cbind(xb,zb))
lasso_boot[,i] <- glmnet(x = xzb, y = yb, lambda = cv.lasso_result$lambda.min)$beta[,1]
plasso_boot <- plasso(xb, zb, yb, lambda_seq = cv.plasso_result$lambda_min, zlinear = FALSE)
plasso_boot_beta[,i] <- plasso_boot$beta_mat
plasso_boot_theta[,,i] <- plasso_boot$theta_mat
c2plasso_boot <- c2plasso(xb, zb, yb, df_Z = df_Z, lambda_seq = cv.c2plasso_result$lambda_min, zlinear = FALSE)
c2plasso_boot_beta[,i] <- c2plasso_boot$beta_mat
c2plasso_boot_theta[,,i] <- c2plasso_boot$theta_mat
}
lasso_boot
lasso_boot[,1]
lasso_boot[,1:2]
plasso_boot_beta[,1:2]
plasso_boot_theta[,,1]
c2plasso_boot_beta[,1:2]
c2plasso_boot_theta[,,1]
dim(lasso_boot)
apply(lasso_boot, 1, sd)
apply(plasso_boot_beta, 1, sd)
apply(plasso_boot_theta, c(1,2), sd)
apply(c2plasso_boot_beta, 1, sd)
apply(c2plasso_boot_theta, c(1,2), sd)
plasso_beta_sd <- apply(plasso_boot_beta, 1, sd)
plasso_theta_sd <- apply(plasso_boot_theta, c(1,2), sd)
c2plasso_beta_sd <- apply(c2plasso_boot_beta, 1, sd)
c2plasso_theta_sd <- apply(c2plasso_boot_theta, c(1,2), sd)
plasso_beta <- cv.plasso_result$beta_mat[,which.min(cv.plasso_result$cvm)]
plasso_theta <- cv.plasso_result$theta_mat[,,which.min(cv.plasso_result$cvm)]
c2plasso_beta <- cv.c2plasso_result$beta_mat[,which.min(cv.c2plasso_result$cvm)]
c2plasso_theta <- cv.c2plasso_result$theta_mat[,,which.min(cv.c2plasso_result$cvm)]
sign(plasso_beta)*max(abs(plasso_beta) - 1.96*plasso_beta_sd, 0)
sign(plasso_beta)
abs(plasso_beta)
plasso_beta_sd
max(abs(plasso_beta) - 1.96*plasso_beta_sd, 0)
sign(plasso_beta)*pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0)
(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_theta*(pmax(abs(plasso_theta) - 1.96*plasso_theta_sd, 0) != 0)
plasso_theta_sd*(pmax(abs(plasso_theta) - 1.96*plasso_theta_sd, 0) != 0)
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_theta*(pmax(abs(c2plasso_theta) - 1.96*c2plasso_theta_sd, 0) != 0)
lasso_beta_sd <- apply(lasso_boot, 1, sd)
lasso_beta <- lasso_result$beta[,which.min(cv.lasso_result$cvm)]
lasso_beta
lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_sd*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta
lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0) !=0
sum(lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0) !=0)
lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_sd*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_final <- lasso_beta*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_sd_final <- lasso_beta_sd*(pmax(abs(lasso_beta) - 1.96*lasso_beta_sd, 0) != 0)
lasso_beta_final/lasso_beta_sd_final
lasso_beta_final*lasso_beta_sd_final
lasso_beta/lasso_beta_sd
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_theta
plasso_theta_sd
plasso_boot_beta[6,]
plasso_theta
plasso_boot_theta[6,4,]
sd(plasso_boot_beta[6,])
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
sd(plasso_boot_beta[6,]+plasso_boot_theta[6,4,])
plasso_theta
sd(plasso_boot_beta[26,]+plasso_boot_theta[26,3,])
sd(plasso_boot_beta[26,])
sd(plasso_boot_beta[26,]+plasso_boot_theta[26,3,]); sd(plasso_boot_beta[26,]+plasso_boot_theta[26,4,])
sd(plasso_boot_beta[36,]+plasso_boot_theta[36,3,]); sd(plasso_boot_beta[36,]+plasso_boot_theta[36,4,])
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_theta
sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,4,])
sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,3,]); sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,4,])
sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,4,])
sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,3,]); sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,4,])
lasso_beta/lasso_beta_sd
lasso_beta/lasso_beta_sd/sqrt(938/937)
sqrt(938/937)
lasso_beta*lasso_beta_sd/sqrt(938/937)
lasso_beta
lasso_beta_final[6]
x[,6]
sd(x[,6])
lasso_beta_final[6]*sd(x[,6])
lasso_beta_final[6]*sd(x[,6])/sqrt(938/937)
lasso_beta_final[6]*sd(x[,6])/sqrt(938/937); lasso_beta_sd_final[6]*sd(x[,6])/sqrt(938/937)
lasso_beta_final[26]*sd(x[,26])/sqrt(938/937); lasso_beta_sd_final[26]*sd(x[,26])/sqrt(938/937)
lasso_beta_final[31]*sd(x[,31])/sqrt(938/937); lasso_beta_sd_final[31]*sd(x[,31])/sqrt(938/937)
lasso_beta_final[36]*sd(x[,36])/sqrt(938/937); lasso_beta_sd_final[36]*sd(x[,36])/sqrt(938/937)
sum(lasso_beta_final!=0)
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_theta
mean(plasso_boot_beta[6,]+plasso_boot_theta[6,4,])
mean(plasso_boot_beta[6,])
plasso_beta
plasso_beta
plasso_theta[6,4]
plasso_beta[6]+plasso_theta[6,4]
sd(plasso_boot_beta[6,]+plasso_boot_theta[6,4,])
plasso_beta_sd
plasso_beta[26]+plasso_theta[26,3]; plasso_beta[26]+plasso_theta[26,4]
plasso_beta*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
plasso_beta_sd*(pmax(abs(plasso_beta) - 1.96*plasso_beta_sd, 0) != 0)
sd(plasso_boot_beta[26,]+plasso_boot_theta[26,3,]); sd(plasso_boot_beta[26,]+plasso_boot_theta[26,4,])
plasso_beta[36]+plasso_theta[36,3]; plasso_beta[36]+plasso_theta[36,4]
sd(plasso_boot_beta[36,]+plasso_boot_theta[36,3,]); sd(plasso_boot_beta[36,]+plasso_boot_theta[36,4,])
c2plasso_beta*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta_sd*(pmax(abs(c2plasso_beta) - 1.96*c2plasso_beta_sd, 0) != 0)
c2plasso_beta[6]+c2plasso_theta[6,4]
sd(c2plasso_boot_beta[6,]+c2plasso_boot_theta[6,4,])
c2plasso_beta[26]+c2plasso_theta[26,4]
sd(c2plasso_boot_beta[26,]+c2plasso_boot_theta[26,4,])
c2plasso_beta[36]+c2plasso_theta[36,3]; c2plasso_beta[36]+c2plasso_theta[36,4]
sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,3,]); sd(c2plasso_boot_beta[36,]+c2plasso_boot_theta[36,4,])
getwd()
save.image("Data_Result.Rdata")
?cv.plasso
cv.lasso_result$cvm
cv.lasso_result$cvm[which.min(cv.lasso_result$cvm)]
cv.plasso_result$cvm[which.min(cv.plasso_result$cvm)]
cv.c2plasso_result$cvm[which.min(cv.c2plasso_result$cvm)]
devtools::install_github("rakheon/c2plasso", force = TRUE)
library(usethis)
getwd()
path
path <- "/Users/junkyungkim/Desktop/Class/STAT689_SC/"
fullpath <- file.path(path, "rpactest")
create_package(fullpath)
